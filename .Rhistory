df
mpg_new
mpg_new
mean(data=mpg_new, city,highway)
mean(city,highway)
mean(mpg_new)
mean(mpg_new(city,highway))
mean(mpg_new(city))
total<-mpg_new(city,highway)
mpg_new$tatal <- (mpg_new$city+mpg_new$highway)
head(mpg_new)
mpg_new$tatal <- (mpg_new$city+mpg_new$highway)/2
head(mpg_new)
mean(mpg_new$total)
head(mpg_new)
mean(mpg_new$total)
mean(mpg_new$total)
mean(mpg_new$total)
head(mpg_new)
mpg_new$tㅐㅐtal <- (mpg_new$city+mpg_new$highway)/2
mpg_new$total <- (mpg_new$city+mpg_new$highway)/2
head(mpg_new)
mean(mpg_new$total)
View(df_new)
View(df)
View(mpg_new)
summary(mpg_new$total)
hist(mpg_new$total)
View(mpg_new)
View(mpg_new)
mpgnew$test <- ifelse(mpg_new$total >=20,"pass","fail")
mean(mpg_new$total)
summary(mpg_new$total)
hist(mpg_new$total)
mpgnew$test <- ifelse(mpg_new$total >=20,"pass","fail")
head(mpg_new)
head(mpg_new,20)
talble(mpg_new$test)
library(ggplot2)
table(mpg_new$test)
library(ggplot2)
qplot(mpg_new$test)
qplot(mpg_new$test)
mpgnew$test <- ifelse(mpg_new$total >=20,"pass","fail")
mpg_new$test <- ifelse(mpg_new$total >=20,"pass","fail")
head(mpg_new,20)
table(mpg_new$test)
qplot(mpg_new$test)
summary(mpg_new$total)
mpg_new$grade <- ifelse(mpg_new$total >=30,"A",total >20, "B","fail")
mpg_new$grade <- ifelse(mpg_new$total >=30,"A", >20, "B","fail")
mpg_new$grade <- ifelse(mpg_new$total >=30,"A",>20, "B","fail")
mpg_new$grade <- ifelse(mpg_new$total >=30,"A",total>20, "B","fail")
mpg_new$grade <- ifelse(mpg_new$total >=30,"A",total>20,"B","C")
mpg_new$grade <- ifelse(mpg_new$total >=30 "A",total>20"B","C")
mpg_new$grade <- ifelse(mpg_new$total >=30,"A">20,"B","C")
mpg_new$grade <- ifelse(mpg_new$total >=30,"A">20,"B",20<"C")
mpg_new$grade <- ifelse(mpg_new$total >=30,"A", ifelse(mpg_new$total>=20,"B","c")
head(mpg_new)
head(mpg_new)
mpg_new$grade <- ifelse(mpg_new$total >=30,"A", ifelse(mpg_new$total>=20,"B","c")
head(mpg_new)
mpg_new$grade <- ifelse(mpg_new$total >=30,"A", ifelse(mpg_new$total>=20,"B","c")
mpg_new$grade <- ifelse(mpg_new$total >=30,"A", ifelse(mpg_new$total>=20,"B","c"))
head(mpg_new)
mpg_new$grade <- ifelse(mpg_new$total >=30,"A", ifelse(mpg_new$total>=20,"B","c"))
head(mpg_new)
table(mpg_new$grade)
head(ggplot2)
library(ggplot2)
df_1 <- data.frame(ggplot::midwest)
df_1 <- data.frame(ggplot2::midwest)
head(df_1)
head(df_1)
table(df_1)
head(df_1)
head(df_1,6)
gead(df_1)
df_1<-rename(df_1,total=poptotal,asian=popasian)
gead(df_1)
library(dplyr)
df_1<-rename(df_1,total=poptotal,asian=popasian)
gead(df_1)
head(df_1)
df_1<-rename(df_1,total=poptotal,asian=popasian)
head(df_1)
head(df_1)
head(df_1,3)
df_1$asianper <- df_1$asian/df_1total*100
df_1$asianper <- df_1$asian/df_1$total*100
fead(df_1)
head(df_1)
hist(df_1)
hist(df_1)
hist(df_1$asianper)
mean(df_1$asianper)
df_1$mean <- ifelse(df_1$asianper>mean(df_1$asiaper),"large","small")
df_1$mean <- ifelse(df_1$asianper> mean(df_1$asiaper),"large","small")
df_1$mean <- ifelse(df_1$asianper > mean(df_1$asiaper),"large","small")
df_1$asiapertotal <- ifelse(df_1$asianper > mean(df_1$asiaper),"large","small")
hist(df_1$asianper)
mean(df_1$asianper)
df_1$asiapertotal <- ifelse(df_1$asianper > mean(df_1$asiaper),"large","small")
head(df_1)
df_1$aisanpermid <- mean(df_1$asianper)
df_1$asiapertotal <- ifelse(df_1$asianper > df_1$asanpermid,"large","small")
df_1$asiapertotal <- ifelse(df_1$asianper > df_1$aisanpermid,"large","small")
head(df_1)
head(df_1)
df_1 <- df_1[,-c(,35)]
df_1 <- df_1[,-c(,34)]
df_1 <- df_1[,-c(,31)]
df_1 <- df_1[,-c(,30)]
df_1 <- df_1[,-c(,29)]
df_1 <- df_1[,-c(,28)]
df_1 <- df_1[,-c(,27)]
df_1 <- df_1[,,-27)]
df_1 <- df_1[,(),-27)]
df_1 <- df_1[,-(,27)]
df_1 <- df_1[,-c(,32)]
df_1 <- df_1[,-c(,31)]
df_1 <- df_1[,-c(,30)]
mean(df_1$asianper)
df_1$asiapertotal <- ifelse(df_1$asianper > 0.4872462,"large","small")
head(df_1)
dim(df_1)
df_1 <- df_1[-c(,32)]
df_1 <- df_1[-c(,31)]
df_1 <- df_1[,-31]
head(df_1)
df_1 <- df_1[,-31]
head(df_1)
df_1 <- df_1[,-30]
head(df_1)
mean(df_1$asianper)
df_1$asiapermid <- ifelse(df_1$asianper > 0.4872462,"large","small")
head(df_1)
cls
cls
#카페 매출 데이터 분석
setwd("C:/GithubData/Rclass/Rclass")
install.packages("readxl")
library(readxl)
sales=read_xlsx("Cafe_Sales.xlsx")
head(sales)
tail(sales)
dim(sales)
str(sales)
summary(sales)
View(sales)
is.na(sales)
table(is.na(sales))
#결측치를 자동으로 보여주는 기능이 있지만 일단 기초부터 가보자.
table(is.na(sales@order_id))
#결측치를 자동으로 보여주는 기능이 있지만 일단 기초부터 가보자.
table(is.na(sales@order_id))
table(is.na(sales@order_date))
#결측치를 자동으로 보여주는 기능이 있지만 일단 기초부터 가보자.
table(is.na(sales$order_id))
table(is.na(sales$order_date))
sales <- na.omit(sales)
table(is.na(sales))
head(sales)
unique(sales$order_date)
unique(sales$price)
unique(sales$item)
unique(sales$category)
table(sales$item)
sort(table(slaes$item))
sort(table(sales$item))
sort(table(sales$item),decreasing = TRUE) #내림차순정렬
#매출액 계산
table(sales$item)
sales_tr
#매출액 계산
sales_tr <- data.frame(table(sales$item))
sales_tr
sales_item <- subset.data.frame(sales, select = c("item","price"))
sales_item
#매출액 계산
sales_tr <- data.frame(table(sales$item))
sales_tr
sales_item <- unique(sales_item)
sales_item
#제품별 판매 개수와 제품별 가격을 계산하여보자
#merge합병
item_list <- merge(sales_tr, sales_item)
item_list
#중복값이 또 나온다. 합쳐보자. 특정
item_list <- merge(sales_tr, sales_item, by.x="Var1", by.y="item")
item_list
item_list$amount <- item_list$Freq * item_list$price
item_list
sum(item_list$amount)
sort(item_list$amount)
table(sort(item_list$amount))
sort(item_list)
sales$weekday <- weekdays(sales$order_date)
table(sales$weekday)
date_info = data.frame(weekday = c("월요일","화요일","수요",
"목요일","금요일","토요일","일요일"),
day=c("평일","평일","평일","평일","평일","주말","주말"))
sales <- merge(sales,date_info)
head(sales)
head(sales,100)
table(sales$day)
#계절별 판매 분석
sales$month <- months(sales$order_date)
head(sales)
#자 그럼 season이라는 열을 만들어서 12~2겨울.3~5봄.6-8여름,9~11가을
monte_info<-data.frame(month=c(1,2,3,4,5,6,7,8,9,10,11,12),
season=c("겨울","겨울","봄","봄","봄","여름","여름","여름","가을","가을","가을","겨울"))
sales <-merge(sales,month_info)
#자 그럼 season이라는 열을 만들어서 12~2겨울.3~5봄.6-8여름,9~11가을
month_info<-data.frame(month=c(1,2,3,4,5,6,7,8,9,10,11,12),
season=c("겨울","겨울","봄","봄","봄","여름","여름","여름","가을","가을","가을","겨울"))
sales <-merge(sales,month_info)
head(sales)
table(sales$month_info)
#자 그럼 season이라는 열을 만들어서 12~2겨울.3~5봄.6-8여름,9~11가을
season<-data.frame(month=c(1,2,3,4,5,6,7,8,9,10,11,12),
season=c("겨울","겨울","봄","봄","봄","여름","여름","여름","가을","가을","가을","겨울"))
sales2 <-merge(sales,season_info)
sales2 <-merge(sales,season)
table(sales$month_info)
table(sales$season)
table(sales2$season)
sales2 <-merge(sales2,season)
table(sales2$season)
sum(item_list$amount)
#요일별 판매 분석
#함수를 이용해 요일을 표시해보자
sales$weekday <- weekdays(sales$order_date)
#요일별 판매량
table(sales$weekday)
date_info <- data.frame(weekday = c("월요일","화요일","수요",
"목요일","금요일","토요일","일요일"),
day=c("평일","평일","평일","평일","평일","주말","주말"))
sales <- merge(sales,date_info)
head(sales)
table(sales$day)
View(season)
View(sales2)
View(sales2)
#계절별 판매 분석
sales$month <- months(sales$order_date)
head(sales)
head(sales)
head(sales)
table(sales$day)
sales <- merge(sales,date_info)
library(readxl)
sales=read_xlsx("Cafe_Sales.xlsx")
#요일별 판매 분석
#함수를 이용해 요일을 표시해보자
sales$weekday <- weekdays(sales$order_date)
#요일별 판매량
table(sales$weekday)
date_info <- data.frame(weekday = c("월요일","화요일","수요",
"목요일","금요일","토요일","일요일"),
day=c("평일","평일","평일","평일","평일","주말","주말"))
sales <- merge(sales,date_info)
head(sales)
table(sales$day)
#계절별 판매 분석
sales$month <- months(sales$order_date)
sales$month <- months(sales$order_date)
head(sales)
sales$season <- ifelse(sales$month>=12,"겨울",
ifelse(sales$month>=9,"가을",
ifelse(sales$month>=6,"여름",
ifelse(sales$month>=3,"봄",
ifelse(sales$month>=1,"겨울")))))
head(sales)
table(sales$season)
head(sales)
table(sales$season)
sales=read_xlsx("Cafe_Sales.xlsx")
head(sales)
tail(sales)
dim(sales)
str(sales)
summary(sales)
View(sales)
#결측치 확인 ... NA확인 및 제거
is.na(sales)
#전체를 살펴볼때 몇만개짜리를 하나하나 확인할수 없기때문에
#테이블을 활용해 준다.
table(is.na(sales))
#결측치를 자동으로 보여주는 기능이 있지만 일단 기본부터 가보자.
table(is.na(sales$order_id))
table(is.na(sales$order_date))
#date에 있다는게 확인되었다. 키워드를 이용하여 날려보자
#결측치 제거
sales <- na.omit(sales)
table(is.na(sales))
head(sales)
#order_id를 보면 중복된값들이 있다. 손님이 4개의 order를 한것이다.
#이러한 중복값들을 정리하는걸 알아보자.
#일단 중복값을 정렬하여 확인하는 unique
unique(sales$order_date)
#날짜를 찍어보니 시간까지 order_date열에 함께 들어가있다.
# UTC <- 과학 표준 시간
unique(sales$price)
unique(sales$item)
unique(sales$category)
#매장에서 팔린 제품의 총 판매 금액이 얼마나 될까
#혹은 제품마다 판매한 갯수는 몇개나 될까
table(sales$item)
sort(table(sales$item)) #오름차순정렬
sort(table(sales$item),decreasing = TRUE) #내림차순정렬
#매출액 계산
sales_tr <- data.frame(table(sales$item))
sales_tr
#매출액을 정확하게 알려면, 아이템과 판매량 그리고 가격까지 알아야한다.
#일단 set으로 만들어서 조회해보자
#아이템별 판매량 set
sales_item <- subset.data.frame(sales, select = c("item","price"))
sales_item
sales_item <- unique(sales_item)
sales_item
#제품별 판매 개수와 제품별 가격을 계산하여보자
#merge합병
item_list <- merge(sales_tr, sales_item)
item_list
#중복값이 또 나온다. 합쳐보자.
item_list <- merge(sales_tr, sales_item, by.x="Var1", by.y="item")
item_list
item_list$amount <- item_list$Freq * item_list$price
item_list
#매출이 상품별로 잘 나온다. 합산해보자
sum(item_list$amount)
#요일별 판매 분석
#함수를 이용해 요일을 표시해보자
sales$weekday <- weekdays(sales$order_date)
#요일별 판매량
table(sales$weekday)
date_info <- data.frame(weekday = c("월요일","화요일","수요",
"목요일","금요일","토요일","일요일"),
day=c("평일","평일","평일","평일","평일","주말","주말"))
sales <- merge(sales,date_info)
head(sales)
table(sales$day)
#계절별 판매 분석
#자 그럼 season이라는 열을 만들어서 12~2겨울.3~5봄.6-8여름,9~11가을
#season<-data.frame(month=c(1,2,3,4,5,6,7,8,9,10,11,12),
#                   season=c("겨울","겨울","봄","봄","봄","여름","여름","여름","가을"#,"가을","가을","겨울"))
sales$month <- months(sales$order_date)
sales$month <- as.integer(gsub('월','',sales$month))
sales$season <- ifelse(sales$month>=12,"겨울",
ifelse(sales$month>=9,"가을",
ifelse(sales$month>=6,"여름",
ifelse(sales$month>=3,"봄",
ifelse(sales$month>=1,"겨울")))))
head(sales)
table(sales$season)
sales2<-Null
#시각화
drop <- season
#시각화
droplevels.data.frame(drop)
#시각화
droplevels.data.frame(drop)
cate <- date.frame(table(sales$category))
#시각화
droplevels.data.frame(drop)
cate <- date.frame(table(sales$category))
head(sales)
table(sales$season)
library(ggplot2)
sales=read_xlsx("Cafe_Sales.xlsx")
head(sales)
tail(sales)
dim(sales)
str(sales)
summary(sales)
View(sales)
#결측치 확인 ... NA확인 및 제거
is.na(sales)
#전체를 살펴볼때 몇만개짜리를 하나하나 확인할수 없기때문에
#테이블을 활용해 준다.
table(is.na(sales))
#결측치를 자동으로 보여주는 기능이 있지만 일단 기본부터 가보자.
table(is.na(sales$order_id))
table(is.na(sales$order_date))
#date에 있다는게 확인되었다. 키워드를 이용하여 날려보자
#결측치 제거
sales <- na.omit(sales)
table(is.na(sales))
head(sales)
#order_id를 보면 중복된값들이 있다. 손님이 4개의 order를 한것이다.
#이러한 중복값들을 정리하는걸 알아보자.
#일단 중복값을 정렬하여 확인하는 unique
unique(sales$order_date)
#날짜를 찍어보니 시간까지 order_date열에 함께 들어가있다.
# UTC <- 과학 표준 시간
unique(sales$price)
unique(sales$item)
unique(sales$category)
#매장에서 팔린 제품의 총 판매 금액이 얼마나 될까
#혹은 제품마다 판매한 갯수는 몇개나 될까
table(sales$item)
sort(table(sales$item)) #오름차순정렬
sort(table(sales$item),decreasing = TRUE) #내림차순정렬
#매출액 계산
sales_tr <- data.frame(table(sales$item))
sales_tr
#매출액을 정확하게 알려면, 아이템과 판매량 그리고 가격까지 알아야한다.
#일단 set으로 만들어서 조회해보자
#아이템별 판매량 set
sales_item <- subset.data.frame(sales, select = c("item","price"))
sales_item
sales_item <- unique(sales_item)
sales_item
#제품별 판매 개수와 제품별 가격을 계산하여보자
#merge합병
item_list <- merge(sales_tr, sales_item)
item_list
#중복값이 또 나온다. 합쳐보자.
item_list <- merge(sales_tr, sales_item, by.x="Var1", by.y="item")
item_list
item_list$amount <- item_list$Freq * item_list$price
item_list
#매출이 상품별로 잘 나온다. 합산해보자
sum(item_list$amount)
#요일별 판매 분석
#함수를 이용해 요일을 표시해보자
sales$weekday <- weekdays(sales$order_date)
#요일별 판매량
table(sales$weekday)
date_info <- data.frame(weekday = c("월요일","화요일","수요",
"목요일","금요일","토요일","일요일"),
day=c("평일","평일","평일","평일","평일","주말","주말"))
sales <- merge(sales,date_info)
head(sales)
table(sales$day)
#계절별 판매 분석
#자 그럼 season이라는 열을 만들어서 12~2겨울.3~5봄.6-8여름,9~11가을
#season<-data.frame(month=c(1,2,3,4,5,6,7,8,9,10,11,12),
#                   season=c("겨울","겨울","봄","봄","봄","여름","여름","여름","가을"#,"가을","가을","겨울"))
sales$month <- months(sales$order_date)
sales$month <- as.integer(gsub('월','',sales$month))
sales$season <- ifelse(sales$month>=12,"겨울",
ifelse(sales$month>=9,"가을",
ifelse(sales$month>=6,"여름",
ifelse(sales$month>=3,"봄",
ifelse(sales$month>=1,"겨울")))))
head(sales)
table(sales$season)
#시각화
cate <- date.frame(table(sales$category))
cate
library(ggplot2)
ggplot(cate)
ggplot(cate, aes(Var1,Freq))+GeomCol()
ggplot(cate, aes(Var1,Freq))+geom_col()
cate <- date.frame(table(sales$category))
cate
head(sales)
table(sales$season)
cate <- date.frame(table(sales$category))
cate
cate <- data.frame(table(sales$category))
cate
library(ggplot2)
ggplot(cate, aes(Var1,Freq))+geom_col()
ggplot(cate, aes(Var1,Freq))+
geom_col()+
geom_text_text(label=cate$Freq)
ggplot(cate, aes(Var1,Freq))+
geom_col()+
geom_text(label=cate$Freq)
ggplot(cate, aes(Var1,Freq))+
geom_text(label=cate$Freq)
ggplot(cate, aes(Var1,Freq))+
geom_col()+
geom_text(label=cate$Freq)
week
week<-data.frame(table(sales$weekday))
week
ggplot(week, aes("요일","판매량"))+
geom_col()+
geom_text(label=week)
ggplot(week, aes("요일","판매량"))+
geom_col()+
geom_text(label=sales$weekday)
week
ggplot(week, aes(요일,판매량)+
geom_text(label=sales$weekday)
geom_text(label=sales$weekday)
ggplot(week, aes(1,2)+
geom_text(label=sales$weekday)
ggplot2(week, aes(1,2)+
week
ggplot(week, aes(Var1,Freq)+
ggplot(week, aes(Var1,Freq))+
geom_col()+
geom_text(label=sales$weekday)
ggplot(week, aes(Var1,Freq))+
geom_col()+
geom_text(label=sales$weekday)
ggplot(week, aes(Var1,Freq))+
geom_col()+
geom_text(label=weekday)
ggplot(week, aes(Var1,Freq))+
geom_col()+
geom_text(label=week$Freq)
week$per <- week$Freq / sum(week$Freq) *100
table(week)
week
ggplot(week, aes(x="",y=per,fill=Var1))+
geom_col()
